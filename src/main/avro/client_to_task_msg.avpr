/*
 * Copyright (C) 2016 Seoul National University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This protocol defines the client message to mist tasks. The current implemented part is query submission action.
 **/
{
    "namespace": "edu.snu.mist.common.bridge.formats.avro",
    "protocol": "ClientToTaskMessage",
    "types": [
        {"type": "record", "name": "LogicalPlan", "fields": [
            {"name": "Vertices", "type": {"type": "array", "items":
                {"name": "Vertex", "type": "record", "fields": [
                    {"name": "VertexType", "type": {
                        "name": "VertexTypeEnum",
                        "type": "enum",
                        "symbols": ["SOURCE", "INSTANT_OPERATOR", "WINDOW_OPERATOR", "SINK"]
                    }},
                    {"name": "Attributes", "type": [
                        {"name": "SourceInfo", "type": "record", "fields": [
                            {"name": "SourceType", "type": {
                                "name": "SourceTypeEnum", "type": "enum", "symbols": ["REEF_NETWORK_SOURCE"]
                            }},
                            {"name": "SourceConfiguration", "type": {"type": "map", "values": "bytes"}}
                        ]},
                        {"name": "InstantOperatorInfo", "type": "record", "fields": [
                            {"name": "InstantOperatorType", "type": {
                                "name": "InstantOperatorTypeEnum", "type": "enum", "symbols": [
                                "APPLY_STATEFUL", "FILTER", "FLAT_MAP", "MAP", "REDUCE_BY_KEY", "REDUCE_BY_KEY_WINDOW"]
                            }},
                            {"name": "Functions", "type": {"type": "array", "items": "bytes"}},
                            {"name": "KeyIndex", "type": ["null", "int"]}
                        ]},
                        {"name": "WindowOperatorInfo", "type": "record", "fields": [
                            {"name": "SizePolicyType", "type": {
                                "name": "SizePolicyTypeEnum", "type": "enum", "symbols": ["TIME"]
                            }},
                            {"name": "SizePolicyInfo", "type": [
                                {"name": "TimeDuration", "type": "int"}
                            ]},
                            {"name": "EmitPolicyType", "type": {
                                "name": "EmitPolicyTypeEnum", "type": "enum", "symbols": ["TIME"]
                            }},
                            {"name": "EmitPolicyInfo", "type": [
                                {"name": "TimeInterval", "type": "int"}
                            ]}
                        ]},
                        {"name": "SinkInfo", "type": "record", "fields": [
                            {"name": "SinkType", "type": {
                                "name": "SinkTypeEnum", "type": "enum", "symbols": ["REEF_NETWORK_SOURCE"]
                            }},
                            {"name": "SinkConfiguration", "type": {"type": "map", "values": "bytes"}}
                        ]}
                    ]}
                ]}
            }},
            {"name": "Edges", "type":{"type": "array", "items": {"name": "Edge", "type": "record", "fields": [
                {"name": "From", "type": "int"},
                {"name": "To", "type": "int"}
            ]}}}
        ]},
        {"type": "record", "name": "QuerySubmissionResult", "fields": [
            {"name": "IsSuccessful", "type": "boolean"},
            {"name": "FailDescription", "type": "string"}
        ]}
    ]},
    "messages": {
       "sendQueries": {
           "request": "LogicalPlan",
           "response": "QuerySubmissionResult"
       }
    }
}